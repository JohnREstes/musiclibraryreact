{"version":3,"sources":["components/buildTable.js","components/Forms.js","components/SortColumn.js","App.js","serviceWorker.js","index.js"],"names":["BuildTable","props","table","data","map","music","id","title","album","artist","genre","key","Form","handleFormChange","event","setState","searchField","target","value","handleSearchChange","state","type","placeholder","this","onChange","Component","SortColumn","handleTitleClick","onClick","el","App","musicCollection","filteredMusic","loading","bind","compare","search","filter","toLowerCase","includes","a","b","itemA","titleClicked","toUpperCase","itemB","comparison","newList","myFilter","sort","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98a2fa35.chunk.js","sourcesContent":["import React from 'react'\n\nfunction BuildTable(props){\n    var table = props.data.map(music => {\n      const { id, title, album, artist, genre } = music\n      return (\n        <tr key={id}>\n          <td>{title}</td>\n          <td>{album}</td>\n          <td>{artist}</td>\n          <td>{genre}</td>\n        </tr>\n      )\n    })\n    return (<tbody>{table}</tbody>)\n  }\n\nexport default BuildTable;","import React, { Component } from 'react'\n\nclass Form extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            searchField: ''\n        }\n    }\n\n    handleFormChange = (event) => {\n        this.setState({\n            searchField: event.target.value\n        })\n        this.props.handleSearchChange(event.target.value)\n    }\n\n    render(){\n        return (\n            <div>\n            <form>\n                <input type='text' \n                placeholder='Type to search...'\n                value={this.state.searchField} \n                onChange={this.handleFormChange}\n                /> \n            </form>  \n            </div>\n        )\n    }\n}\n\nexport default Form","import React, { Component } from 'react'\n\nclass SortColumn extends Component {\n\n    handleTitleClick = (event) => {\n        this.props.handleTitleClick(event)\n    }\n\n    render(){\n        return (\n            <tr>\n            <th id=\"title\" onClick={el => this.handleTitleClick(el.target.id)}>Title</th>\n            <th id=\"album\" onClick={el => this.handleTitleClick(el.target.id)}>Album</th>\n            <th id=\"artist\" onClick={el => this.handleTitleClick(el.target.id)}>Artist</th>\n            <th id=\"genre\" onClick={el => this.handleTitleClick(el.target.id)}>Genre</th>\n            </tr>\n        )\n    }\n}\n\nexport default SortColumn","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport BuildTable from './components/buildTable.js';\nimport Form from './components/Forms.js'\nimport SortColumn from './components/SortColumn.js'\nimport music from './components/music.json'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    const titleClicked = '';\n    this.state = {\n      musicCollection:[],\n      filteredMusic: [],\n      loading: true\n    }\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleTitleClick = this.handleTitleClick.bind(this);\n    this.compare = this.compare.bind(this);\n  }\n\n  componentDidMount() {\n    // axios.get(`http://www.devcodecampmusiclibrary.com/api/music`)\n    // .then(res => this.setState({ \n    //   musicCollection: res.data,\n    //   filteredMusic: res.data,\n    //   loading: false\n    // }));\n    this.setState({ \n      musicCollection: music,\n      filteredMusic: music,\n      loading: false\n    });\n  }\n  \n  myFilter(search){\n    return this.state.musicCollection.filter(function(el) {\n        return el[\"title\"].toLowerCase().includes(search.toLowerCase()) ||\n        el[\"album\"].toLowerCase().includes(search.toLowerCase()) ||\n        el[\"artist\"].toLowerCase().includes(search.toLowerCase()) ||\n        el[\"genre\"].toLowerCase().includes(search.toLowerCase());\n    }\n  )} \n\n  compare(a, b) {\n    const itemA = a[this.titleClicked].toUpperCase();\n    const itemB = b[this.titleClicked].toUpperCase();\n    let comparison = 0;\n    if (itemA > itemB) {\n      comparison = 1;\n    } else if (itemA < itemB) {\n      comparison = -1;\n    }\n    return comparison;\n  }\n  \n  handleSearchChange(event){\n    const newList = this.myFilter(event);\n    this.setState({\n      filteredMusic: newList,\n    });\n  }\n\n  handleTitleClick(event){\n    this.titleClicked = event;\n    const newList = this.state.filteredMusic.sort(this.compare);\n    this.setState({\n      filteredMusic: newList,\n    });\n  }\n\n  render(){\n    return (<div>\n        <div id=\"titleHeader\"><h1>Music Library</h1>\n        <Form \n        handleSearchChange={this.handleSearchChange}\n        /><span id=\"sortAlpha\">click title to sort alphabetically</span>\n        </div>\n        <table id=\"music\">\n            <thead>\n              <SortColumn \n              handleTitleClick={this.handleTitleClick}\n              />\n              </thead>\n            <BuildTable data={this.state.filteredMusic}/>\n        </table>\n    </div>\n    )\n  }  \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}